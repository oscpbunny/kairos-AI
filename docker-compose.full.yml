services:
  postgres:
    image: postgres:13
    container_name: kairos_postgres_full
    environment:
      POSTGRES_USER: kairos
      POSTGRES_PASSWORD: kairos_password
      POSTGRES_DB: kairos
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - kairos_db_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kairos -d kairos"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:6.2
    container_name: kairos_redis_full
    ports:
      - "6379:6379"
    volumes:
      - kairos_redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  api:
    image: kairos:full
    container_name: kairos_api_full
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=kairos
      - POSTGRES_PASSWORD=kairos_password
      - POSTGRES_DB=kairos
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAIROS_ENV=production
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - GRPC_PORT=50051
    ports:
      - "8000:8000"
      - "50051:50051"
    volumes:
      - kairos_logs:/kairos/logs
    command: >
      sh -c "
        echo 'Starting Kairos API Server...' &&
        python -c 'import time; print(\"Waiting for dependencies...\"); time.sleep(10)' &&
        python api/launcher.py
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  oracle:
    build:
      context: .
      dockerfile: Dockerfile.full
    container_name: kairos_oracle_full
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=kairos
      - POSTGRES_PASSWORD=kairos_password
      - POSTGRES_DB=kairos
      - REDIS_HOST=redis
      - KAIROS_ENV=production
      - ORACLE_MODE=full
    volumes:
      - kairos_logs:/kairos/logs
      - kairos_oracle_data:/kairos/oracle/data
    command: >
      sh -c "
        echo 'Starting Kairos Oracle Engine...' &&
        python -c 'import time; print(\"Initializing Oracle...\"); time.sleep(15)' &&
        python oracle/oracle_engine.py
      "
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 6G
        reservations:
          memory: 3G

  steward:
    build:
      context: .
      dockerfile: Dockerfile.full
    container_name: kairos_steward_full
    depends_on:
      api:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=kairos
      - POSTGRES_PASSWORD=kairos_password
      - POSTGRES_DB=kairos
      - REDIS_HOST=redis
      - API_HOST=api
      - KAIROS_ENV=production
      - AGENT_TYPE=steward
      - AGENT_ID=steward-001
    volumes:
      - kairos_logs:/kairos/logs
      - kairos_agent_data:/kairos/agents/data
    command: >
      sh -c "
        echo 'Starting Kairos Steward Agent...' &&
        python -c 'import time; print(\"Initializing Steward...\"); time.sleep(20)' &&
        python agents/enhanced/enhanced_steward.py
      "
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  architect:
    build:
      context: .
      dockerfile: Dockerfile.full
    container_name: kairos_architect_full
    depends_on:
      api:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=kairos
      - POSTGRES_PASSWORD=kairos_password
      - POSTGRES_DB=kairos
      - REDIS_HOST=redis
      - API_HOST=api
      - KAIROS_ENV=production
      - AGENT_TYPE=architect
      - AGENT_ID=architect-001
    volumes:
      - kairos_logs:/kairos/logs
      - kairos_agent_data:/kairos/agents/data
    command: >
      sh -c "
        echo 'Starting Kairos Architect Agent...' &&
        python -c 'import time; print(\"Initializing Architect...\"); time.sleep(25)' &&
        python agents/enhanced/enhanced_architect.py
      "
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  engineer:
    build:
      context: .
      dockerfile: Dockerfile.full
    container_name: kairos_engineer_full
    depends_on:
      api:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=kairos  
      - POSTGRES_PASSWORD=kairos_password
      - POSTGRES_DB=kairos
      - REDIS_HOST=redis
      - API_HOST=api
      - KAIROS_ENV=production
      - AGENT_TYPE=engineer
      - AGENT_ID=engineer-001
    volumes:
      - kairos_logs:/kairos/logs
      - kairos_agent_data:/kairos/agents/data
    command: >
      sh -c "
        echo 'Starting Kairos Engineer Agent...' &&
        python -c 'import time; print(\"Initializing Engineer...\"); time.sleep(30)' &&
        python agents/enhanced/enhanced_engineer.py
      "
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  vision-board:
    build:
      context: .
      dockerfile: Dockerfile.full
    container_name: kairos_vision_board_full
    depends_on:
      api:
        condition: service_healthy
    environment:
      - API_HOST=api
      - API_PORT=8000
      - KAIROS_ENV=production
      - DASHBOARD_MODE=full
    ports:
      - "8080:8080"
    volumes:
      - kairos_logs:/kairos/logs
    stdin_open: true
    tty: true
    command: >
      sh -c "
        echo 'Starting Kairos Vision Board...' &&
        python -c 'import time; print(\"Initializing Vision Board...\"); time.sleep(35)' &&
        python tui/vision_board.py --host 0.0.0.0 --port 8080
      "
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: kairos_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - kairos_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: kairos_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=kairos
    volumes:
      - kairos_grafana_data:/var/lib/grafana
    restart: unless-stopped

volumes:
  kairos_db_data:
  kairos_redis_data:
  kairos_logs:
  kairos_oracle_data:
  kairos_agent_data:
  kairos_prometheus_data:
  kairos_grafana_data:

networks:
  default:
    name: kairos_network
    driver: bridge