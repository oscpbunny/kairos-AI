# Docker Compose for Kairos Phase 6 Production Excellence
# Complete containerized deployment with monitoring, security, and scalability

version: '3.8'

services:
  # Kairos API Server
  kairos-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: kairos-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - KAIROS_ENV=production
      - KAIROS_SECRET_KEY=${KAIROS_SECRET_KEY:-your-secret-key-here}
      - DB_HOST=kairos-db
      - DB_NAME=kairos
      - DB_USER=kairos_user
      - DB_PASSWORD=${DB_PASSWORD:-kairos_password}
      - REDIS_HOST=kairos-redis
      - LOG_LEVEL=INFO
    depends_on:
      - kairos-db
      - kairos-redis
      - prometheus
    networks:
      - kairos-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G

  # PostgreSQL Database
  kairos-db:
    image: postgres:15-alpine
    container_name: kairos-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=kairos
      - POSTGRES_USER=kairos_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-kairos_password}
      - POSTGRES_INITDB_ARGS="--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/kairos_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/kairos_schema_update_p2.sql:/docker-entrypoint-initdb.d/02-update-p2.sql
      - ./database/kairos_schema_update_p3.sql:/docker-entrypoint-initdb.d/03-update-p3.sql
      - ./database/kairos_enhanced_schema.sql:/docker-entrypoint-initdb.d/04-enhanced-schema.sql
    networks:
      - kairos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kairos_user -d kairos"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Redis Cache
  kairos-redis:
    image: redis:7-alpine
    container_name: kairos-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password} --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - kairos-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: kairos-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus_enhanced.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    networks:
      - kairos-network
    depends_on:
      - kairos-api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: kairos-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_SERVER_DOMAIN=localhost
      - GF_SMTP_ENABLED=false
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./monitoring/kairos-dashboard.json:/var/lib/grafana/dashboards/kairos-dashboard.json
    networks:
      - kairos-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: kairos-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - kairos-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.13.2
    container_name: kairos-postgres-exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://kairos_user:${DB_PASSWORD:-kairos_password}@kairos-db:5432/kairos?sslmode=disable
    networks:
      - kairos-network
    depends_on:
      - kairos-db
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:v1.52.0-alpine
    container_name: kairos-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://kairos-redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
    networks:
      - kairos-network
    depends_on:
      - kairos-redis
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: kairos-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    networks:
      - kairos-network
    command:
      - '--housekeeping_interval=10s'
      - '--docker_only=true'
      - '--store_container_labels=false'
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

  # Alertmanager for alerts
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: kairos-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--log.level=info'
    networks:
      - kairos-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: kairos-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - kairos-network
    depends_on:
      - kairos-api
      - grafana
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

# Networks
networks:
  kairos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Persistent volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  nginx_logs:
    driver: local

# Health check and monitoring setup
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s